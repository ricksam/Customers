@{
    Layout = "~/Views/Shared/_LayoutFastCode.cshtml";
    ViewBag.Title = "Template";
}

<div id="app">
    <nav class="navbar bg-light">
        <div class="container-fluid">
            <a class="navbar-brand">Fast.Code</a>
            <form class="d-flex" role="search">
                <input class="form-control me-2" type="search" placeholder="Nome do template" aria-label="Search"
                       v-model="template.name">
                <button class="btn btn-outline-primary me-2" type="button" @@click="loadFile()">Load</button>
                <button class="btn btn-outline-primary me-2" type="button" @@click="prepare()">Prepare</button>
                <input type="file" id="input_file" class="input-file"
                       style="opacity:0; position:absolute; width:0; height: 0;" onchange="ReadFile(this)" />
                <button class="btn btn-outline-success" type="button" @@click="build">Build</button>
            </form>
        </div>
    </nav>
    <div class="container-fluid">
        <div class="row my-2">
            <div class="col-md-10">
                <textarea wrap="off" style="height: 100%;" class="form-control code" placeholder="code" spellcheck="false"
                          v-model="template.code"></textarea>
            </div>
            <div class="col-md-2">
                <ul class="list-group">
                    <li class="list-group-item">[namespace]</li>
                    <li class="list-group-item">[entity]</li>
                    <li class="list-group-item">[entity.index]</li>
                    <li class="list-group-item">[entity.count]</li>
                    <li class="list-group-item">[field]</li>
                    <li class="list-group-item">[field.title]</li>
                    <li class="list-group-item">[field.size]</li>
                    <li class="list-group-item">[field.role]</li>
                    <li class="list-group-item">[field.placeholder]</li>
                    <li class="list-group-item">[field.index]</li>
                    <li class="list-group-item">[field.count]</li>
                    <li class="list-group-item">[pk]</li>
                </ul>
                <ul class="list-group">
                    <li v-for="(item, index) in template.fields" :key="index" :class="classField(index)"
                        @@click="selectField(index)">
                        [{{item.name}}] <span class="float-end badge bg-danger"
                                              @@click.stop="modalRemoveField(index)">-</span>
                    </li>
                </ul>
                <div class="input-group my-2">
                    <input type="text" class="form-control" placeholder="Novo tipo" aria-label="Novo tipo"
                           aria-describedby="basic-addon2" v-model="addfield" v-on:keyup.enter="newField()">
                    <button class="btn btn-primary" @@click="newField()">+</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="modalField" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div v-if="selectedField" class="modal-body">
                    <div class="input-group my-2">
                        <span class="input-group-text">Tipo</span>
                        <input type="text" aria-label="Tipo" placeholder="Novo Tipo"
                               class="form-control form-control-sm" v-model="selectedField.name">
                    </div>
                    <h5>Conversões</h5>
                    <div class="input-group my-2">
                        <span class="input-group-text">number</span>
                        <textarea rows="2" wrap='off' class="form-control form-control-sm"
                                  v-model="selectedField.type.number" placeholder="number"></textarea>
                    </div>
                    <div class="input-group my-2">
                        <span class="input-group-text">value</span>
                        <textarea rows="2" wrap='off' class="form-control form-control-sm"
                                  v-model="selectedField.type.value" placeholder="value"></textarea>
                    </div>
                    <div class="input-group my-2">
                        <span class="input-group-text">text</span>
                        <textarea rows="2" wrap='off' class="form-control form-control-sm"
                                  v-model="selectedField.type.text" placeholder="text"></textarea>
                    </div>
                    <div class="input-group my-2">
                        <span class="input-group-text">bool</span>
                        <textarea rows="2" wrap='off' class="form-control form-control-sm"
                                  v-model="selectedField.type.bool" placeholder="bool"></textarea>
                    </div>
                    <div class="input-group my-2">
                        <span class="input-group-text">date</span>
                        <textarea rows="2" wrap='off' class="form-control form-control-sm"
                                  v-model="selectedField.type.date" placeholder="date"></textarea>
                    </div>
                    <div class="input-group my-2">
                        <span class="input-group-text">time</span>
                        <textarea rows="2" wrap='off' class="form-control form-control-sm"
                                  v-model="selectedField.type.time" placeholder="time"></textarea>
                    </div>
                    <div class="input-group my-2">
                        <span class="input-group-text">file</span>
                        <textarea rows="2" wrap='off' class="form-control form-control-sm"
                                  v-model="selectedField.type.file" placeholder="file"></textarea>
                    </div>
                    <div class="input-group my-2">
                        <span class="input-group-text">password</span>
                        <textarea rows="2" wrap='off' class="form-control form-control-sm"
                                  v-model="selectedField.type.password" placeholder="password"></textarea>
                    </div>
                    <div class="input-group my-2">
                        <span class="input-group-text">fk</span>
                        <textarea rows="2" wrap='off' class="form-control form-control-sm"
                                  v-model="selectedField.type.fk" placeholder="fk"></textarea>
                    </div>
                    <h5>Regras</h5>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" value="" id="cbFirst"
                               v-model="selectedField.role.first">
                        <label class="form-check-label" for="cbFirst">
                            Primeiro campo
                        </label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" value="" id="cbLast"
                               v-model="selectedField.role.last">
                        <label class="form-check-label" for="cbLast">
                            Último campo
                        </label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" value="" id="cbOuthers"
                               v-model="selectedField.role.outhers">
                        <label class="form-check-label" for="cbOuthers">
                            Demais campos
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Remove Field -->
    <div class="modal fade" id="modalRemoveField" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div v-if="selectedField" class="modal-body">
                    Tem certesa que deseja remover o campo {{selectedField.name}}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal"
                            @@click="removeField()">
                        Remover
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Name -->
    <div class="modal fade" id="modalName" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    Informe o nome do arquivo
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Ok</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles{
    <style>
        .input-group-text {
            width: 100px;
        }

        .code {
            overflow: scroll;
            overflow-y: scroll;
            overflow-x: scroll;
            overflow: -moz-scrollbars-vertical;
            background-clip: content-box;
            background-color: #faebd7;
            font-family: 'Lucida Console', Monospace;
        }
    </style>
}

@section Scripts{
    <script>

        const app = new Vue({
            el: "#app",
            data: {
                template: {
                    name: '',
                    fields: []
                },
                addfield: '',
                selected: 0,
                to_remove: 0
            },
            computed: {
                selectedField() {
                    return this.template.fields[this.selected];
                }
            },
            methods: {
                loadFile() {
                    $("#input_file").val('');
                    $("#input_file").trigger('click');
                },
                prepare() {
                    let newtext = "";
                    for (const item of this.template.code.split("\n")) {
                        newtext += ' ' + item + '\n';
                    }
                    this.template.code = newtext;
                },
                build() {
                    if (this.template.name) {
                        export2txt(this.template);
                    } else {
                        $("#modalName").modal('show');
                    }
                },
                classField(index) {
                    return 'list-group-item ' + (this.selected == index ? 'active' : '');
                },
                selectField(index) {
                    this.selected = index;
                    $("#modalField").modal('show');
                },
                newField() {
                    this.template.fields.push({ name: this.addfield, type: {}, role: {} });
                    this.addfield = '';
                },
                modalRemoveField(index) {
                    this.selected = index;
                    $('#modalRemoveField').modal('show');
                    /*setTimeout(()=>{
                        $("#modalField").modal('hide');
                    }, 200);*/
                },
                removeField() {
                    this.template.fields.splice(this.selected, 1);
                },
            }
        });
        function ReadFile(input_file) {
            if (input_file.files && input_file.files[0]) {
                var FR = new FileReader();
                FR.onload = function (e) {
                    console.log("File", e.target.result);
                    const json = JSON.parse(e.target.result);
                    console.log("Json", json);
                    app.template = json;
                };
                FR.readAsText(input_file.files[0]);
            }
        }
        function export2txt(data) {
            const a = document.createElement("a");
            a.href = URL.createObjectURL(new Blob([JSON.stringify(data, null, 2)], {
                type: "application/json;charset=iso-8859-1,%EF%BB%BF"
            }));
            a.setAttribute("download", app.template.name + ".json");
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }
    </script>
}
